import type { NextPage } from 'next';
import Head from 'next/head';
import { FormEvent, useEffect, useMemo, useState } from 'react';
import { useRecoilState } from 'recoil';
import { io } from 'socket.io-client';
import styled from 'styled-components';
import { v4 } from 'uuid';
import { userState } from '../atoms/user';
import { Message } from '../types/chat';

const socket = io(`http://localhost:8000`, {
  transports: ['websocket'],
});

const Home: NextPage = () => {
  const [chat, setChat] = useState('');
  const [chatList, setChatList] = useState<Message[]>([]);
  const userName = useMemo(() => v4(), []);
  const [user, setUser] = useRecoilState(userState);
  const [nowUser, setNowUser] = useState<number>(0);

  useEffect(() => {
    setUser({ name: userName });
  }, []);

  useEffect(() => {
    socket.on('welcome', (data) => {
      setNowUser(data.time.length);
    });

    socket.on('send message', (message: Message) => {
      setChatList([...chatList, message]);
    });

    socket.on('bye', () => {
      setNowUser(nowUser - 1);
    });
  }, [chatList, nowUser]);

  const handleChat = (e: FormEvent) => {
    e.preventDefault();
    socket.emit('chat message', {
      name: user.name,
      data: chat,
    });
    setChat('');
  };

  // const handleRoomClick = (number: number) => {
  //   const room = io('/room' + number, {
  //     transports: ['websocket'],
  //   });
  //   room.on('news', (data) => {
  //     console.log(data);
  //   });
  // };

  return (
    <>
      <Head>
        <title>Real time chatting</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Container>
        현재 이용자 수 : {nowUser}
        <form onSubmit={handleChat}>
          <input
            type="text"
            value={chat}
            onChange={(e) => setChat(e.target.value)}
          />
          <button onClick={handleChat}> send </button>
        </form>
        <ChattingWrapper>
          {chatList.length > 0 &&
            chatList?.map((chat, index) => (
              <li key={chat.name + index}>
                {chat.name} : {chat.data}
              </li>
            ))}
        </ChattingWrapper>
        {/* <button onClick={() => handleRoomClick(1)}>room1</button> */}
      </Container>
      {/* 이전꺼 참고 */}
    </>
  );
};

const Container = styled.main`
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
`;

const ChattingWrapper = styled.div`
  width: 800px;
  height: 500px;
  background: tomato;
`;

export default Home;
